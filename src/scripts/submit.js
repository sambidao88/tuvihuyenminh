const { createClient } = require('@supabase/supabase-js');
const axios = require('axios');
require('dotenv').config();

const supabaseUrl = process.env.SUPABASE_URL;
const supabaseKey = process.env.SUPABASE_KEY;
const geminiApiKey = process.env.GEMINI_API_KEY;
const supabase = createClient(supabaseUrl, supabaseKey);

exports.handler = async (event) => {
  try {
    // Parse d·ªØ li·ªáu t·ª´ form
    const body = JSON.parse(event.body);
    const { name, email, phone, solarBirthdate, hourdate } = body;

    // Ki·ªÉm tra tr√πng email/phone trong 30 ng√†y
    const thirtyDaysAgo = new Date();
    thirtyDaysAgo.setDate(thirtyDaysAgo.getDate() - 30);

    const { data: existingRecords } = await supabase
      .from('horoscope_records')
      .select('*')
      .or(`email.eq.${email},phone.eq.${phone}`)
      .gte('created_at', thirtyDaysAgo.toISOString());

    if (existingRecords.length > 0) {
      return {
        statusCode: 200,
        headers: { 'Content-Type': 'text/html' },
        body: `
          <main class="max-w-lg mx-auto p-4 md:p-6 rounded-lg shadow-md bg-gradient-to-b from-amber-200 to-amber-300" id="main-content">
            <h2 class="text-2xl md:text-3xl font-semibold text-red-700 mb-4 text-center">Th√¥ng b√°o</h2>
            <p class="text-gray-800 text-center">B·∫°n ƒë√£ xem t·ª≠ vi trong v√≤ng 30 ng√†y tr∆∞·ªõc. Vui l√≤ng th·ª≠ l·∫°i sau!</p>
            <button class="w-1/3 mt-6 mx-auto p-2 bg-red-600 hover:bg-red-700 text-white font-semibold rounded-lg shadow-md transition duration-300" hx-get="/" hx-target="#main-content" hx-swap="outerHTML">Quay l·∫°i form</button>
          </main>
        `,
      };
    }

    // T·∫°o ID duy nh·∫•t
    const id = `${new Date().toISOString().replace(/[-T:.Z]/g, '')}${Math.floor(Math.random() * 1000)}`;

    // Chuy·ªÉn ƒë·ªïi ng√†y √¢m l·ªãch
    const lunarBirthdate = await convertToLunarDate(solarBirthdate);

    // T·∫°o prompt v√† g·ªçi Gemini API
    const prompt = generatePrompt(lunarBirthdate, hourdate);
    const geminiResponse = await callGoogleGemini(prompt);
    const resultJson = JSON.parse(geminiResponse);

    // L∆∞u v√†o Supabase
    const { error } = await supabase.from('horoscope_records').insert({
      id,
      name,
      email,
      phone,
      solar_birthdate: solarBirthdate,
      hourdate,
      lunar_birthdate: lunarBirthdate,
      result: resultJson,
    });

    if (error) throw new Error(error.message);

    // Tr·∫£ v·ªÅ HTML k·∫øt qu·∫£
    const htmlOutput = generateResultHtml(resultJson);
    return {
      statusCode: 200,
      headers: { 'Content-Type': 'text/html' },
      body: htmlOutput,
    };
  } catch (error) {
    console.error(error);
    return {
      statusCode: 500,
      headers: { 'Content-Type': 'text/html' },
      body: `
        <main class="max-w-lg mx-auto p-4 md:p-6 rounded-lg shadow-md bg-gradient-to-b from-amber-200 to-amber-300" id="main-content">
          <h2 class="text-2xl md:text-3xl font-semibold text-red-700 mb-4 text-center">L·ªói</h2>
          <p class="text-gray-800 text-center">ƒê√£ x·∫£y ra l·ªói khi x·ª≠ l√Ω y√™u c·∫ßu. Vui l√≤ng th·ª≠ l·∫°i!</p>
          <button class="w-1/3 mt-6 mx-auto p-2 bg-red-600 hover:bg-red-700 text-white font-semibold rounded-lg shadow-md transition duration-300" hx-get="/" hx-target="#main-content" hx-swap="outerHTML">Quay l·∫°i form</button>
        </main>
      `,
    };
  }
};

// H√†m chuy·ªÉn ƒë·ªïi ng√†y √¢m l·ªãch
async function convertToLunarDate(solarDate) {
  const [day, month, year] = solarDate.split('/').map(Number);
  const response = await axios.post('https://open.oapi.vn/date/convert-to-lunar', {
    day,
    month,
    year,
  });
  const { data } = response.data;
  return `${data.day} th√°ng ${data.month} nƒÉm ${data.sexagenaryCycle}`;
}

// H√†m t·∫°o prompt cho AI
function generatePrompt(lunarDate, hourdate) {
  return `B·∫°n l√† m·ªôt chuy√™n gia t·ª≠ vi ph∆∞∆°ng ƒê√¥ng. H√£y ph√¢n t√≠ch v·∫≠n m·ªánh c·ªßa m·ªôt ng∆∞·ªùi sinh v√†o ng√†y √¢m l·ªãch ${lunarDate}, gi·ªù sinh ${hourdate} theo ƒë·ªãnh d·∫°ng JSON sau, vi·∫øt chi ti·∫øt, h·∫•p d·∫´n, v√† b√≠ ·∫©n:\n\n` +
         `{\n` +
         `  "lunarDate": "${lunarDate}",\n` +
         `  "hourdate": "${hourdate}",\n` +
         `  "result": {\n` +
         `    "cungMenh": "Cung m·ªánh c·ªßa b·∫°n thu·ªôc [Ng≈© h√†nh ‚Äì T√™n cung], mang nƒÉng l∆∞·ª£ng [m√¥ t·∫£ ng·∫Øn, b√≠ ·∫©n]. [Chi ti·∫øt ng≈© h√†nh, Thi√™n Can, ƒê·ªãa Chi, v√† ·∫£nh h∆∞·ªüng c·ªßa gi·ªù sinh].",\n` +
         `    "tinhCach": "B·∫°n l√† ng∆∞·ªùi [m√¥ t·∫£ t√≠nh c√°ch], v·ªõi [·∫£nh h∆∞·ªüng c·ªßa gi·ªù sinh]. AI nh·∫≠n th·∫•y b·∫°n c√≥ [ƒëi·ªÉm n·ªïi b·∫≠t, v√≠ d·ª• ngh·ªÅ nghi·ªáp ph√π h·ª£p].",\n` +
         `    "suNghiepTaiLoc": "S·ª± nghi·ªáp: [Lu·∫≠n ƒëo√°n s·ª± nghi·ªáp 2025, c∆° h·ªôi, l·ªùi khuy√™n], T√†i l·ªôc: [Lu·∫≠n ƒëo√°n t√†i l·ªôc 2025, th·ªùi ƒëi·ªÉm may m·∫Øn, l·ªùi c·∫£nh b√°o].",\n` +
         `    "tinhDuynGiaDao": "T√¨nh duy√™n: [Lu·∫≠n ƒëo√°n t√¨nh duy√™n 2025, c∆° h·ªôi, th·ª≠ th√°ch], Gia ƒë·∫°o: [Lu·∫≠n ƒëo√°n gia ƒë·∫°o 2025, l·ªùi khuy√™n].",\n` +
         `    "loiKhuyen": "1. [L·ªùi khuy√™n 1]. 2. [L·ªùi khuy√™n 2]. 3. [L·ªùi khuy√™n 3].",\n` +
         `    "vanHan2025": "[Lu·∫≠n ƒëo√°n v·∫≠n h·∫°n chi ti·∫øt, th·ª≠ th√°ch, v√† c√°ch v∆∞·ª£t qua trong nƒÉm 2025]."\n` +
         `  }\n` +
         `}\n\n` +
         `üéØ Vi·∫øt sinh ƒë·ªông, b√≠ ·∫©n, v√† chuy√™n nghi·ªáp, nh·∫•n m·∫°nh s·ª± ch√≠nh x√°c c·ªßa AI.`;
}

// H√†m g·ªçi Gemini API
async function callGoogleGemini(prompt) {
  const url = `https://generativelanguage.googleapis.com/v1/models/gemini-pro:generateContent?key=${geminiApiKey}`;
  const response = await axios.post(url, {
    contents: [{ role: 'user', parts: [{ text: prompt }] }],
  });
  return response.data.candidates[0].content.parts[0].text;
}

// H√†m t·∫°o HTML k·∫øt qu·∫£
function generateResultHtml(resultJson) {
  const { lunarDate, hourdate, result } = resultJson;
  return `
    <main class="max-w-lg mx-auto p-4 md:p-6 rounded-lg shadow-md bg-gradient-to-b from-amber-200 to-amber-300" id="main-content">
      <h2 class="text-2xl md:text-3xl font-semibold text-red-700 mb-4 text-center">K·∫øt qu·∫£ t·ª≠ vi c·ªßa b·∫°n</h2>
      <div class="space-y-6">
        <div class="bg-white p-4 rounded-lg shadow-md">
          <h3 class="text-lg md:text-xl font-bold text-red-600 mb-2">Th√¥ng tin c∆° b·∫£n</h3>
          <p class="text-gray-800">Ng√†y sinh √¢m l·ªãch: <span class="font-semibold text-red-700">${lunarDate}</span></p>
          <p class="text-gray-800">Gi·ªù sinh: <span class="font-semibold text-red-700">${hourdate}</span></p>
        </div>
        <div class="bg-white p-4 rounded-lg shadow-md">
          <h3 class="text-lg md:text-xl font-bold text-red-600 mb-2">1. Cung m·ªánh</h3>
          <p class="text-gray-800">${result.cungMenh}</p>
        </div>
        <div class="bg-white p-4 rounded-lg shadow-md">
          <h3 class="text-lg md:text-xl font-bold text-red-600 mb-2">2. T√≠nh c√°ch</h3>
          <p class="text-gray-800">${result.tinhCach}</p>
        </div>
        <div class="bg-white p-4 rounded-lg shadow-md">
          <h3 class="text-lg md:text-xl font-bold text-red-600 mb-2">3. S·ª± nghi·ªáp & T√†i l·ªôc</h3>
          <p class="text-gray-800"><strong>S·ª± nghi·ªáp:</strong> ${result.suNghiepTaiLoc.split(',')[0]}</p>
          <p class="text-gray-800"><strong>T√†i l·ªôc:</strong> ${result.suNghiepTaiLoc.split(',')[1]}</p>
        </div>
        <div class="bg-white p-4 rounded-lg shadow-md">
          <h3 class="text-lg md:text-xl font-bold text-red-600 mb-2">4. T√¨nh duy√™n & Gia ƒë·∫°o</h3>
          <p class="text-gray-800"><strong>T√¨nh duy√™n:</strong> ${result.tinhDuynGiaDao.split(',')[0]}</p>
          <p class="text-gray-800"><strong>Gia ƒë·∫°o:</strong> ${result.tinhDuynGiaDao.split(',')[1]}</p>
        </div>
        <div class="bg-white p-4 rounded-lg shadow-md">
          <h3 class="text-lg md:text-xl font-bold text-red-600 mb-2">5. L·ªùi khuy√™n</h3>
          <ul class="list-disc list-inside text-gray-800">
            ${result.loiKhuyen.split('.').map(item => item.trim() ? `<li>${item}</li>` : '').join('')}
          </ul>
        </div>
        <div class="bg-white p-4 rounded-lg shadow-md">
          <h3 class="text-lg md:text-xl font-bold text-red-600 mb-2">6. V·∫≠n h·∫°n nƒÉm 2025</h3>
          <p class="text-gray-800">${result.vanHan2025}</p>
        </div>
        <button class="w-1/3 mt-6 mx-auto p-2 bg-red-600 hover:bg-red-700 text-white font-semibold rounded-lg shadow-md transition duration-300" hx-get="/" hx-target="#main-content" hx-swap="outerHTML">Quay l·∫°i form</button>
      </div>
    </main>
  `;
}